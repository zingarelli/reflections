When would you want to use a remote repository rather than keeping all your work local?
Reply: When I want to share my code so others can see it and download it to their own
repository. It's also good to have a remote repository when working together with other 
people as a team, so everybody can work on the same project and eventually update their 
changes to the remote repository.

Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?
Reply: Maybe if you're working with other people, it might be better if you pull changes 
so you may know what went on between the time you last pulled from the remote repository.

Describe the differences between forks, clones, and branches. When would you use one 
instead of another?
Reply: Forks and clones work the same way, but fork is exclusive to GitHub. It allows you
to copy a repository from GitHub directly to your GitHub account. You can afterwards 
clone this forked repository to your local repository. The advantage here is that you 
keep a link to the original repository that you've forked, hence the creator is referenced, 
which is a good practice. Branches may be thought as a clone of a commit with changes that
do not affect the original commit, unless you want it (via git merge). This allows you to, 
for example, test new features that you don't want to be shared yet to the working project.

What is the benefit of having a copy of the last known state of the remote stored locally?
Reply: So you can know if you're ahead or behind the last commit on remote.

How would you collaborate without using Git or GitHub? What would be easier, and what 
would be harder?
Reply: Like I do without version control: divide the project into smaller tasks and 
distributing them with the team, so each one takes care of a particular task. Later on,
we would get together and unify our tasks into a single code. This is easier to small
projects, but gets complicated when the project starts growing bigger. In this case, git
would be a possible choice to keep things organized.

When would you want to make changes in a separate branch rather than directly in master? 
What benefits does each approach have?
Reply: Think of master as your showcase to the public. So you want it to be as perfect 
as possible, without errors. This way, when making changes, using a separate branch to 
test it first should be advisable, so you can avoid possible errors going to public. 
Now if you're going to change small things that won't break your project, then changing
it directly in master won't be such a big deal.






